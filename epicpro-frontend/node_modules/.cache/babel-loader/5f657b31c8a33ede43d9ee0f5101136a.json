{"ast":null,"code":"'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar callBound = require('call-bound');\n\nvar $toString = callBound('Object.prototype.toString');\n/** @type {import('.')} */\n\nvar isStandardArguments = function isArguments(value) {\n  if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n    return false;\n  }\n\n  return $toString(value) === '[object Arguments]';\n};\n/** @type {import('.')} */\n\n\nvar isLegacyArguments = function isArguments(value) {\n  if (isStandardArguments(value)) {\n    return true;\n  }\n\n  return value !== null && typeof value === 'object' && 'length' in value && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && 'callee' in value && $toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = function () {\n  return isStandardArguments(arguments);\n}(); // @ts-expect-error TODO make this not error\n\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\n/** @type {import('.')} */\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;","map":{"version":3,"sources":["/opt/lampp/htdocs/epicpro-frontend/node_modules/is-arguments/index.js"],"names":["hasToStringTag","require","callBound","$toString","isStandardArguments","isArguments","value","Symbol","toStringTag","isLegacyArguments","length","callee","supportsStandardArguments","arguments","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAAP,EAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIE,SAAS,GAAGD,SAAS,CAAC,2BAAD,CAAzB;AAEA;;AACA,IAAIE,mBAAmB,GAAG,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACrD,MACCN,cAAc,IACXM,KADH,IAEG,OAAOA,KAAP,KAAiB,QAFpB,IAGGC,MAAM,CAACC,WAAP,IAAsBF,KAJ1B,EAKE;AACD,WAAO,KAAP;AACA;;AACD,SAAOH,SAAS,CAACG,KAAD,CAAT,KAAqB,oBAA5B;AACA,CAVD;AAYA;;;AACA,IAAIG,iBAAiB,GAAG,SAASJ,WAAT,CAAqBC,KAArB,EAA4B;AACnD,MAAIF,mBAAmB,CAACE,KAAD,CAAvB,EAAgC;AAC/B,WAAO,IAAP;AACA;;AACD,SAAOA,KAAK,KAAK,IAAV,IACH,OAAOA,KAAP,KAAiB,QADd,IAEH,YAAYA,KAFT,IAGH,OAAOA,KAAK,CAACI,MAAb,KAAwB,QAHrB,IAIHJ,KAAK,CAACI,MAAN,IAAgB,CAJb,IAKHP,SAAS,CAACG,KAAD,CAAT,KAAqB,gBALlB,IAMH,YAAYA,KANT,IAOHH,SAAS,CAACG,KAAK,CAACK,MAAP,CAAT,KAA4B,mBAPhC;AAQA,CAZD;;AAcA,IAAIC,yBAAyB,GAAI,YAAY;AAC5C,SAAOR,mBAAmB,CAACS,SAAD,CAA1B;AACA,CAFgC,EAAjC,C,CAIA;;;AACAT,mBAAmB,CAACK,iBAApB,GAAwCA,iBAAxC,C,CAA2D;;AAE3D;;AACAK,MAAM,CAACC,OAAP,GAAiBH,yBAAyB,GAAGR,mBAAH,GAAyBK,iBAAnE","sourcesContent":["'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar callBound = require('call-bound');\n\nvar $toString = callBound('Object.prototype.toString');\n\n/** @type {import('.')} */\nvar isStandardArguments = function isArguments(value) {\n\tif (\n\t\thasToStringTag\n\t\t&& value\n\t\t&& typeof value === 'object'\n\t\t&& Symbol.toStringTag in value\n\t) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\n/** @type {import('.')} */\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null\n\t\t&& typeof value === 'object'\n\t\t&& 'length' in value\n\t\t&& typeof value.length === 'number'\n\t\t&& value.length >= 0\n\t\t&& $toString(value) !== '[object Array]'\n\t\t&& 'callee' in value\n\t\t&& $toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\n// @ts-expect-error TODO make this not error\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\n/** @type {import('.')} */\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n"]},"metadata":{},"sourceType":"script"}